<?php

/**
 * @file
 * Contains comp_crud.module.
 */

use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\FileInterface;

/**
 * Implements hook_entity_presave().
 */
function comp_crud_entity_presave($entity) {
  // Process for different content types.
  switch($entity->bundle()) {

    // If the entity is a composite...
    case 'composite':
      // Process and add decade value.
      // Retrieve year.
      $year = $entity->get('field_comp_year')->getValue()[0]['value'];
      $decade = intdiv($year, 10) * 10;
      $decade = $decade >= 1870 ? $decade : NULL;
      $entity->set('field_comp_decade', $decade);

      // Sort subjects by last name.
      // Retrieve subject node ids associated to composite.
      $sids = $entity->get('field_subjects')->getValue();

      // Retrieve title (name) for each id.
      foreach ($sids as $k=>$sid) {
        $subject = Node::load($sid['target_id']);
        $sid['name'] = $subject->getTitle();
        $sids[$k] = $sid;
        // Since we have the subject, add a reference back to the composite.
        $comp_ref = ['target_id' => $entity->id()];
        $subject->set('field_composite', $comp_ref);
        $subject->save();
      }

      // Sort multidimensional array by name column.
      array_multisort(array_column($sids, 'name'), SORT_ASC, $sids);

      // Create array with only the new sorted 'target_id'.
      $sorted_sids = [];

      foreach ($sids as $k=>$sid) {
        $sorted_sids[$k] = ['target_id' => $sid['target_id']];
      }

      // Update field value with the sorted ids.
      $entity->get('field_subjects')->setValue($sorted_sids);

      // Update image alt tag.
      $image = $entity->get('field_image')->getValue();
      $title = $entity->getTitle();

      if (!empty($image)) {
        $image[0]['alt'] = $title;
        $image[0]['title'] = $title;
        $entity->get('field_image')->setValue($image);
      }
    break;

    // If the entity is a subject...
    case 'subject':
      // Build name and save as title.
      // Retrieve name fields. Use first name, then initials, if available.
      if (!empty($entity->get('field_last_name')->getValue()[0]['value'])) {
        $lname = $entity->get('field_last_name')->getValue()[0]['value'];
      }

      if (!empty($entity->get('field_initials')->getValue()[0]['value'])) {
        $initials = $entity->get('field_initials')->getValue()[0]['value'];
      }

      if (!empty($entity->get('field_given_name')->getValue()[0]['value'])) {
        $gname = $entity->get('field_given_name')->getValue()[0]['value'];
      }
      elseif (!empty($entity->get('field_initials')->getValue()[0]['value'])) {
        $gname = $entity->get('field_initials')->getValue()[0]['value'];
      }

      $title = empty($gname) ? $lname : $lname . ', ' . $gname;
      $entity->set('title', $title);

      // Process and populate sort initial field.
      // Get first title character and classify.
      $leading = strtoupper(substr($title, 0, 1));

      if (ctype_alnum($leading)) {

        if (ctype_digit($leading)) {
            $leading = '#';
        }
      }
      else {
        $leading = '@';
      }

      $entity->set('field_sort_initial', $leading);

      // Zero out coordinates if 'absent' is checked.
      if (!empty($entity->get('field_absent')->getValue()[0])) {
        if ($entity->get('field_absent')->getValue()[0]['value']) {
          $entity->set('field_top_x', 0);
          $entity->set('field_top_y', 0);
          $entity->set('field_bottom_x', 0);
          $entity->set('field_bottom_y', 0);

          // Delete image style if existing.
          $nid = $entity->id();
          // Load all styles.
          $styles = \Drupal::entityQuery('image_style')
          ->execute();

          // Run through styles.
          foreach ($styles as $style_name) {
            // If the style correponds to the subject id...
            if (strpos($style_name, $nid) !== FALSE) {
              // Load, delete, and flush style.
              $style = ImageStyle::load($style_name);
              $style->flush();
              $style->delete();
            }
          }
        }
      }
    break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function comp_crud_entity_insert($entity) {
  // Create all appicable image styles on file upload.
  if ($entity instanceof FileInterface) {
    $image = \Drupal::service('image.factory')->get($entity->getFileUri());

    if ($image->isValid()) {
      $styles = ImageStyle::loadMultiple();
      $image_uri = $entity->getFileUri();

      foreach ($styles as $style) {
        $destination = $style->buildUri($image_uri);
        $style->createDerivative($image_uri, $destination);
      }
    }
  }

  // Process for different content types.
  switch($entity->bundle()) {

    // If the entity is a composite...
    case 'composite':
      // Generate DZI file and tiles.
      $fid = $entity->get('field_image')->getValue()[0]['target_id'];
      $cid = $entity->id();

      if (!empty($fid)) {
        prepare_dzi_batch($fid, $cid);
      }
    break;

    // If the entity is a subject...
    case 'subject':
      // Get subject node id.
      $sid = $entity->id();

      // Add subject reference to linked composite if absent.
      if (!empty($entity->get('field_composite')->getValue()[0]['target_id'])) {
        $cid = $entity->get('field_composite')->getValue()[0]['target_id'];
      }

      if (!empty($cid)) {
        $composite = Node::load($cid);
        $subjects = $composite->get('field_subjects')->getValue();
        $sid = $entity->id();

        if (!in_array($sid, $subjects)) {
          $subjects[] = [ 'target_id' => $sid ];
          $composite->set('field_subjects', $subjects);
          $composite->save();
        }

        // Generate subject image crop style.
        // Retrieve coordinates from subject record.
        $topX = floatval($entity->get('field_top_x')->getValue()[0]['value']);
        $topY = floatval($entity->get('field_top_y')->getValue()[0]['value']);
        $botX = floatval($entity->get('field_bottom_x')->getValue()[0]['value']);
        $botY = floatval($entity->get('field_bottom_y')->getValue()[0]['value']);

        // Retrieve display resolution (dpi).
        $dpi = intval($composite->get('field_disp_resolution')
          ->getValue()[0]['value']);

        $style = update_crop_style($sid, $topX, $topY, $botX, $botY, $dpi, TRUE);
      }
    break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function comp_crud_entity_delete($entity) {
  // Process for different content types.
  switch($entity->bundle()) {

    // If the entity is a composite...
    case 'composite':
    // Retrieve subject node ids associated to composite.
    $sids = $entity->get('field_subjects')->getValue();
    // Delete all associated subjects.
    foreach ($sids as $k=>$sid) {
      $subject = Node::load($sid['target_id']);
      $subject->delete();
    }

    break;
  }
}

/**
 * Implements hook_entity_update().
 */
function comp_crud_entity_update($entity) {
  // Process for different content types.
  switch($entity->bundle()) {

    // If the entity is a composite...
    case 'composite':
    $old_img = $entity->original->get('field_image')->getValue()[0]['target_id'];
    $new_img = $entity->get('field_image')->getValue()[0]['target_id'];

    // If the image was changed...
    if ($new_img != $old_img) {
      $fid = $new_img;
      $nid = $entity->id();

      if (!empty($fid)) {
        // Generate DZI file and tiles.
        prepare_dzi_batch($fid, $nid);
      }
    }

    break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Creates image field for subject node and add as renderable content with the
 * correct image style to crop the composite.
 */
function comp_crud_preprocess_node__subject(&$variables) {
  // Get subject id.
  $sid = $variables['node']->id();
  $cid = $variables['node']->get('field_composite')->getValue()[0]['target_id'];

  if (!empty($cid)) {
    // Pass composite id as content to templates.
    $variables['content']['cid'] = $cid;

    // Retrieve composite node and additional fields.
    $composite = Node::load($cid);
    $comp_title = $composite->title;
    $comp_year = $composite->field_comp_year;
    $comp_type = $composite->field_type;
    $comp_img = $composite->field_image;
    $comp_campus = $composite->field_comp_campus;
  }

  else {
    $comp_campus = $comp_img = $comp_type = $comp_year = NULL;
  }

  if (!empty($comp_title)) {
    // Pass composite year field as content to templates.
    $variables['content']['composite_title'] = $comp_title->view();
    $variables['content']['composite_title']['#title'] = 'Composite Title';
  }

  if (!empty($comp_campus)) {
    // Pass composite year field as content to templates.
    $variables['content']['composite_campus'] = $comp_campus->view();
    $variables['content']['composite_campus']['#title'] = 'Composite Campus';
  }

  if (!empty($comp_year)) {
    // Pass composite year field as content to templates.
    $variables['content']['composite_year'] = $comp_year->view();
    $variables['content']['composite_year']['#title'] = 'Composite Year';
  }

  if (!empty($comp_type)) {
    // Pass composite type field as content to templates.
    $variables['content']['composite_type'] = $comp_type->view();
    $variables['content']['composite_type']['#title'] = 'Composite Type';
  }

  if (!empty($comp_img)) {
    // Pass composite image field as renderable content to templates.
    $variables['content']['composite_image'] = $comp_img->view();
    $variables['content']['composite_image']['#title'] = 'Composite Image';

    // Retrieve display resolution (dpi).
    $dpi = intval($composite->get('field_disp_resolution')
      ->getValue()[0]['value']);

    // Crop effect configuration.
    // Retrieve coordinates from subject record.

    if (!empty(floatval($variables['content']['field_top_x'][0]))
    and !empty(floatval($variables['content']['field_top_y'][0]))
    and !empty(floatval($variables['content']['field_bottom_x']))
    and !empty(floatval($variables['content']['field_bottom_y'][0]))
    ) {
      $topX = floatval($variables['content']['field_top_x'][0]['#markup']);
      $topY = floatval($variables['content']['field_top_y'][0]['#markup']);
      $botX = floatval($variables['content']['field_bottom_x'][0]['#markup']);
      $botY = floatval($variables['content']['field_bottom_y'][0]['#markup']);

      // Call style updating method. Override existing.
      $style = update_crop_style($sid, $topX, $topY, $botX, $botY, $dpi, TRUE);

      $style_name = $style->getName();

      if (!empty($style)) {
        // Save styled image as renederable field to content.
        $variables['content']['subject_image'] = $comp_img->view([
          'type' => 'image',
          'label' => 'above',
          'settings' => [
            'image_style' => $style_name,
          ],
        ]);

        $variables['content']['subject_image']['#title'] = 'Individual Portrait';
        $variables['content']['subject_image']['#weight'] = -1;
      }
    }
  }

  // Update image alt tag.
  $image = $variables['content']['subject_image']['0']['#item'];
  // Build name and use as title.
  // Retrieve name fields.
  $lname = $variables['content']['field_last_name'][0]['#context']['value'];

  $gname = empty($variables['content']['field_given_name'][0]['#context']['value']) ? NULL
    : $variables['content']['field_given_name'][0]['#context']['value'];

  $title = empty($gname) ? $lname : $lname . ', ' . $gname;

  if (!empty($image)) {
    $image->set('alt', $title);
    $image->set('title', $title);
  }

  $variables['content']['subject_image']['0']['#item'] = $image;

  // Delete preview image crop style.
  $style_name = 'pv_composite_crop_' . $dpi . 'dpi';
  $style = ImageStyle::load($style_name);

  if (!empty($style)) {
    $style->delete();
    $style->flush();
  }

}

function update_crop_style($id, $topX, $topY, $botX, $botY, $dpi, $override) {
  // Calculate anchor, width, height using resolution (dpi).
  $anchorX = intval($topX * $dpi);
  $anchorY = intval($topY * $dpi);
  $anchor = strval($anchorX) . "-" . strval($anchorY);
  $width = intval($botX * $dpi) - $anchorX;
  $height = intval($botY * $dpi) - $anchorY;

  // Crop image style name.
  $style_name = $id . '_composite_crop_' . $dpi . 'dpi';

  // Null style reference if it doesn't exist, otherwise load it.
  $style = empty(ImageStyle::load($style_name)) ? NULL
    : ImageStyle::load($style_name);

  // If the style needs override.
  if ($style && $override) {
    $style->delete();
    $style->flush();
    $style = NULL;
  }

  // If the style doesn't exist at this point, create it.
  if (empty($style)) {
    // (Re)create style.
    $style = ImageStyle::create([
      'name' => $style_name,
      'label' => $style_name
    ]);

    // Configuration for cropping effect.
    $config = [
      'uuid' => NULL,
      'id' => 'image_crop',
      'weight' => 0,
      'data' => [
        'width' => $width,
        'height' => $height,
        'anchor' => $anchor,
      ],
    ];

    // Create effect, add to style.
    $effect = \Drupal::service('plugin.manager.image.effect')->
      createInstance($config['id'], $config);

    $style->addImageEffect($effect->getConfiguration());

    // Configuration for scaling effect.
    $config = [
      'uuid' => NULL,
      'id' => 'image_scale',
      'weight' => 0,
      'data' => [
        'width' => 400,
        'upscale' => 1,
      ],
    ];

    // Create effect, add to style.
    $effect = \Drupal::service('plugin.manager.image.effect')->
      createInstance($config['id'], $config);

    $style->addImageEffect($effect->getConfiguration());

    // Configuration for conversion effect.
    $config = [
      'uuid' => NULL,
      'id' => 'image_convert',
      'weight' => 100,
      'data' => [
        'extension' => 'jpg',
      ],
    ];

    // Create effect, add to style.
    $effect = \Drupal::service('plugin.manager.image.effect')->
      createInstance($config['id'], $config);

    $style->addImageEffect($effect->getConfiguration());

    // Save style.
    $style->save();
  }

  return $style;
}

/**
 * Prepare batch process for DZI tile generation.
 */
function prepare_dzi_batch($fid, $nid) {
  // Prepare batch processing.
  $batch = array(
    'title' => t('Updating high-resolution DZI tiles for file ID [' .
      $fid . ']...'),
    'operations' => [],
    'init_message'     => t('Starting...'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message'    => t('An error occurred during processing.'),
    'finished' => t('Done.'),
  );

  // Add generation of DZI tiles for file to batch operations.
  $batch['operations'][] = ['generate_dzi_tiles', [$fid, $nid]];

  // Add batch.
  batch_set($batch);
}

/**
 * Generates DZI tiles for the given image file.
 */
function generate_dzi_tiles($fid, $nid) {
  $file = File::load($fid);
  $filename = $file->getFilename();

  // Cut extension from filename.
  $fn_plain = substr($filename, 0, -4);
  // Get image path.
  $scheme = \Drupal::config('system.file')->get('default_scheme');
  $img_location = \Drupal::service('file_system')->realpath($scheme . "://") . "/comp_images";
  $img_path = $img_location . "/$filename";
  $dzi_path = $img_location . "/dzi/composite_$nid";

  // Generate or update DZI tiles.
  $command = "/usr/local/bin/magick-slicer -e jpg -i \"{$img_path}\"" .
   " -o \"{$dzi_path}\"";

  // Run command in shell.
  shell_exec("$command >/dev/null 2>/dev/null &");

  // For batch process.
  $context['message'] = t(
    'Generated DZI tiles for high-resolution composite file @file',
    [
     '@file' => $fn_plain,
    ]
  );
}
